/**********************************************************************************************************************

	RegisterIPSharedEnums.cpp
		A component that registers project-specific enum conversions.
		DO NOT EDIT THIS FILE; it is automatically generated.

	(c) Copyright 2011, Bret Ambrose (mailto:bretambrose@gmail.com).

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.

**********************************************************************************************************************/

#include <IPShared/EnumConversion.h>

using namespace IP::Enum;

namespace EProcessSubject
{
	enum Enum;
}
enum ESlashCommandParamType;

namespace IP
{
namespace Global
{

void Register_IPShared_Enums( void )
{
	IP::Enum::CEnumConverter::Register_Enum< EProcessSubject::Enum >( "EProcessSubject::Enum", EConvertibleEnumProperties::CEP_NONE );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "CONCURRENCYMANAGER", static_cast< EProcessSubject::Enum >( 1 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "LOGGING", static_cast< EProcessSubject::Enum >( 2 ) );

	IP::Enum::CEnumConverter::Register_Enum< ESlashCommandParamType >( "ESlashCommandParamType", EConvertibleEnumProperties::CEP_NONE );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "INT32_T", static_cast< ESlashCommandParamType >( 1 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "UINT32_T", static_cast< ESlashCommandParamType >( 2 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "INT64_T", static_cast< ESlashCommandParamType >( 3 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "UINT64_T", static_cast< ESlashCommandParamType >( 4 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "STRING", static_cast< ESlashCommandParamType >( 5 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "WSTRING", static_cast< ESlashCommandParamType >( 6 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "FLOAT", static_cast< ESlashCommandParamType >( 7 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "DOUBLE", static_cast< ESlashCommandParamType >( 8 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "BOOL", static_cast< ESlashCommandParamType >( 9 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "ENUM", static_cast< ESlashCommandParamType >( 10 ) );

}

} // namespace Global
} // namespace IP