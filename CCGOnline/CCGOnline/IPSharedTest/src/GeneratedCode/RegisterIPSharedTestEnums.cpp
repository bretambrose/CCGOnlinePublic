/**********************************************************************************************************************

	RegisterIPSharedTestEnums.cpp
		A component that registers project-specific enum conversions.
		DO NOT EDIT THIS FILE; it is automatically generated.

	(c) Copyright 2011, Bret Ambrose (mailto:bretambrose@gmail.com).

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.

**********************************************************************************************************************/

#include <IPCore/Always.h>

#include <IPShared/EnumConversion.h>

using namespace IP::Enum;

enum EReflectionTest;
enum EReflectionBitfieldTest;
namespace TestNameSpace
{
	enum Test;
}
enum BaseTest;
enum DerivedTest;
namespace ETestExtendedProcessSubject
{
	enum Enum;
}
namespace EProcessSubject
{
	enum Enum;
}
enum EPolySerializerTestTypes;
enum ETableTestClass;

namespace IP
{
namespace Global
{

void Register_IPSharedTest_Enums( void )
{
	IP::Enum::CEnumConverter::Register_Enum< EReflectionTest >( "EReflectionTest", EConvertibleEnumProperties::CEP_NONE );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "INVALID", static_cast< EReflectionTest >( 0 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "ENTRY1", static_cast< EReflectionTest >( 2 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "ENTRY2", static_cast< EReflectionTest >( 4 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "ENTRY3", static_cast< EReflectionTest >( 5 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "ENTRY4", static_cast< EReflectionTest >( 6 ) );

	IP::Enum::CEnumConverter::Register_Enum< EReflectionBitfieldTest >( "EReflectionBitfieldTest", EConvertibleEnumProperties::CEP_BITFIELD );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "NONE", static_cast< EReflectionBitfieldTest >( 0 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "BIT1", static_cast< EReflectionBitfieldTest >( 1 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "BIT2", static_cast< EReflectionBitfieldTest >( 2 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "BIT3", static_cast< EReflectionBitfieldTest >( 4 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "BIT8", static_cast< EReflectionBitfieldTest >( 128 ) );

	IP::Enum::CEnumConverter::Register_Enum< TestNameSpace::Test >( "TestNameSpace::Test", EConvertibleEnumProperties::CEP_NONE );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "NONE", static_cast< TestNameSpace::Test >( 0 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST1", static_cast< TestNameSpace::Test >( 1 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST2", static_cast< TestNameSpace::Test >( 2 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST3", static_cast< TestNameSpace::Test >( 3 ) );

	IP::Enum::CEnumConverter::Register_Enum< BaseTest >( "BaseTest", EConvertibleEnumProperties::CEP_NONE );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "NONE", static_cast< BaseTest >( 0 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST1", static_cast< BaseTest >( 1 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST2", static_cast< BaseTest >( 2 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST3", static_cast< BaseTest >( 3 ) );

	IP::Enum::CEnumConverter::Register_Enum< DerivedTest >( "DerivedTest", EConvertibleEnumProperties::CEP_NONE );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST4", static_cast< DerivedTest >( 4 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST5", static_cast< DerivedTest >( 5 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST6", static_cast< DerivedTest >( 6 ) );

	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST4", static_cast< BaseTest >( 4 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST5", static_cast< BaseTest >( 5 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST6", static_cast< BaseTest >( 6 ) );

	IP::Enum::CEnumConverter::Register_Enum_Entry( "NONE", static_cast< DerivedTest >( 0 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST1", static_cast< DerivedTest >( 1 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST2", static_cast< DerivedTest >( 2 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "TEST3", static_cast< DerivedTest >( 3 ) );

	IP::Enum::CEnumConverter::Register_Enum< ETestExtendedProcessSubject::Enum >( "ETestExtendedProcessSubject::Enum", EConvertibleEnumProperties::CEP_NONE );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "LOGIC", static_cast< ETestExtendedProcessSubject::Enum >( 3 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "NETWORKCONNECTIONMANAGER", static_cast< ETestExtendedProcessSubject::Enum >( 4 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "NETWORKCONNECTIONSET", static_cast< ETestExtendedProcessSubject::Enum >( 5 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "AI", static_cast< ETestExtendedProcessSubject::Enum >( 6 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "UI", static_cast< ETestExtendedProcessSubject::Enum >( 7 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "DATABASE", static_cast< ETestExtendedProcessSubject::Enum >( 8 ) );

	IP::Enum::CEnumConverter::Register_Enum_Entry( "LOGIC", static_cast< EProcessSubject::Enum >( 3 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "NETWORKCONNECTIONMANAGER", static_cast< EProcessSubject::Enum >( 4 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "NETWORKCONNECTIONSET", static_cast< EProcessSubject::Enum >( 5 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "AI", static_cast< EProcessSubject::Enum >( 6 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "UI", static_cast< EProcessSubject::Enum >( 7 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "DATABASE", static_cast< EProcessSubject::Enum >( 8 ) );

	IP::Enum::CEnumConverter::Register_Enum_Entry( "CONCURRENCYMANAGER", static_cast< ETestExtendedProcessSubject::Enum >( 1 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "LOGGING", static_cast< ETestExtendedProcessSubject::Enum >( 2 ) );

	IP::Enum::CEnumConverter::Register_Enum< EPolySerializerTestTypes >( "EPolySerializerTestTypes", EConvertibleEnumProperties::CEP_NONE );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "INVALID", static_cast< EPolySerializerTestTypes >( 0 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "CPOLYDERIVED1", static_cast< EPolySerializerTestTypes >( 1 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "CPOLYDERIVED2", static_cast< EPolySerializerTestTypes >( 2 ) );

	IP::Enum::CEnumConverter::Register_Enum< ETableTestClass >( "ETableTestClass", EConvertibleEnumProperties::CEP_NONE );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "BERSERKER", static_cast< ETableTestClass >( 1 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "JANITOR", static_cast< ETableTestClass >( 2 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "BARD", static_cast< ETableTestClass >( 3 ) );

}

} // namespace Global
} // namespace IP