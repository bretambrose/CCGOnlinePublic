/**********************************************************************************************************************

	EnumReflector.cs
		Main definition for the EnumReflector tool.  This tool digs through C++ .vcproj files and scans the included
		header files for enum definitions that have been tagged using a simple markup system.  The tagged enums
		are parsed and conversion code (string to uint64 and vice versa) is generated and written.  This gives us
		a safe, automatic way of converting between descriptive value definitions and internal C++ values.
 
		The parser was generated by ANTLR (www.antlr.org) and the grammer can be found in
			Grammars/EnumReflector.g
 
		An ANTLR installation is required in order to modify the grammar and update the lexer and parser.

	(c) Copyright 2011, Bret Ambrose (mailto:bretambrose@gmail.com).

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
**********************************************************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Threading;

using Antlr.Runtime;
using Antlr.Runtime.Misc;
using Antlr.Runtime.Tree;

namespace EnumReflector
{

	enum EExecutionMode
	{
		Normal,
		Clean
	}

	class CEnumReflector
	{
		// Construction
		static CEnumReflector()
		{
			Mode = EExecutionMode.Normal;

			ProjectTracker = new CProjectTracker();
			HeaderFileTracker = new CHeaderFileTracker();
			EnumTracker = new CEnumTracker();
		}

		// Methods
		// Private interface
		private static void Process_Command_Line_Arguments( string[] arguments )
		{
			if ( arguments.Length != 2 )
			{
				throw new Exception( "EnumReflector expects two arguments: execution mode (NORMAL/CLEAN), and top level directory path" );
			}

			string upper_arg1 = arguments[ 0 ].ToUpper();
			if ( upper_arg1 == "CLEAN" )
			{
				Mode = EExecutionMode.Clean;
			}
			else if ( upper_arg1 == "NORMAL" )
			{
				Mode = EExecutionMode.Normal;
			}
			else
			{
				throw new Exception( "Illegal first argument (execution mode): must be either 'Normal' or 'Clean'" );
			}

			TopLevelDirectory = arguments[ 1 ] + Path.DirectorySeparatorChar;
		}

		private static int Main( string[] args )
		{
			Mutex global_lock = new Mutex( false, "EnumReflector" );

			// Prevent multiple copies of EnumReflector from interfering with one another if a batch build is in progress
			// Runs after the first should detect no changes and not do any writes
			if ( !global_lock.WaitOne( TimeSpan.FromSeconds( 2.0 ), false ) )
			{
				return 0;
			}

			int error_level = 0;
			try
			{
				Process_Command_Line_Arguments( args );

				Directory.SetCurrentDirectory( "../.." );

				if ( Mode != EExecutionMode.Clean )
				{
					CEnumXMLDatabase.Load_Config();
				}

				ProjectTracker.Initialize_DB_Projects();
				HeaderFileTracker.Initialize_DB_Header_Files();
				EnumTracker.Initialize_DB_Enums();

				ProjectTracker.Initialize_File_Projects();
				HeaderFileTracker.Initialize_Starting_Header_Projects();
				EnumTracker.Initialize_Starting_Enum_States();

				HeaderFileTracker.Process_Dirty_Headers();
				EnumTracker.Process_Final_States();
				ProjectTracker.Write_Enum_Registration_Files();

				CEnumXMLDatabase.Instance.Initialize_From_Trackers( ProjectTracker.SaveRecords, HeaderFileTracker.SaveRecords, EnumTracker.SaveRecords );
				CEnumXMLDatabase.Save_Config();
			}
			catch ( Exception e )
			{
				Console.WriteLine( "Exception: " + e.Message );
				Console.WriteLine( "See EnumReflectorLog.txt for run details" );
				Console.WriteLine( "\nHit any key to continue" );
				Console.ReadKey();
				error_level = 1;
			}
			finally
			{
				global_lock.ReleaseMutex();
			}

			return error_level;
		}

		// Properties
		private static EExecutionMode Mode { get; set; }

		public static CProjectTracker ProjectTracker { get; private set; }
		public static CHeaderFileTracker HeaderFileTracker { get; private set; }
		public static CEnumTracker EnumTracker { get; private set; }

		public static string TopLevelDirectory { get; private set; }
	
	}
}
