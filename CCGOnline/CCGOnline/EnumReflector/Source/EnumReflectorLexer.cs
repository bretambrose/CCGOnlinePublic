//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g 2011-12-10 17:13:14

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
public partial class EnumReflectorLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int BITFIELD=4;
	public const int COMMA=5;
	public const int DIGIT=6;
	public const int ENUM=7;
	public const int ENUM_BEGIN=8;
	public const int ENUM_END=9;
	public const int ENUM_ENTRY=10;
	public const int EQUALS=11;
	public const int HEX_DIGIT=12;
	public const int ID=13;
	public const int LBRACE=14;
	public const int LEFT_SHIFT=15;
	public const int LPAREN=16;
	public const int META=17;
	public const int POSITIVE_INTEGER10=18;
	public const int POSITIVE_INTEGER16=19;
	public const int POS_DIGIT=20;
	public const int RBRACE=21;
	public const int RPAREN=22;
	public const int SEMICOLON=23;
	public const int STRING=24;
	public const int WHITESPACE=25;

    // delegates
    // delegators

	public EnumReflectorLexer()
	{
		OnCreated();
	}

	public EnumReflectorLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public EnumReflectorLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_BITFIELD() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_BITFIELD() {}

    // $ANTLR start "BITFIELD"
    [GrammarRule("BITFIELD")]
    private void mBITFIELD()
    {
    	EnterRule_BITFIELD();
    	EnterRule("BITFIELD", 1);
    	TraceIn("BITFIELD", 1);
    		try
    		{
    		int _type = BITFIELD;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:7:10: ( 'BITFIELD' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:7:12: 'BITFIELD'
    		{
    		DebugLocation(7, 12);
    		Match("BITFIELD"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("BITFIELD", 1);
    		LeaveRule("BITFIELD", 1);
    		LeaveRule_BITFIELD();
        }
    }
    // $ANTLR end "BITFIELD"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COMMA() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COMMA() {}

    // $ANTLR start "COMMA"
    [GrammarRule("COMMA")]
    private void mCOMMA()
    {
    	EnterRule_COMMA();
    	EnterRule("COMMA", 2);
    	TraceIn("COMMA", 2);
    		try
    		{
    		int _type = COMMA;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:8:7: ( ',' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:8:9: ','
    		{
    		DebugLocation(8, 9);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COMMA", 2);
    		LeaveRule("COMMA", 2);
    		LeaveRule_COMMA();
        }
    }
    // $ANTLR end "COMMA"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ENUM() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ENUM() {}

    // $ANTLR start "ENUM"
    [GrammarRule("ENUM")]
    private void mENUM()
    {
    	EnterRule_ENUM();
    	EnterRule("ENUM", 3);
    	TraceIn("ENUM", 3);
    		try
    		{
    		int _type = ENUM;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:9:6: ( 'enum' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:9:8: 'enum'
    		{
    		DebugLocation(9, 8);
    		Match("enum"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ENUM", 3);
    		LeaveRule("ENUM", 3);
    		LeaveRule_ENUM();
        }
    }
    // $ANTLR end "ENUM"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ENUM_BEGIN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ENUM_BEGIN() {}

    // $ANTLR start "ENUM_BEGIN"
    [GrammarRule("ENUM_BEGIN")]
    private void mENUM_BEGIN()
    {
    	EnterRule_ENUM_BEGIN();
    	EnterRule("ENUM_BEGIN", 4);
    	TraceIn("ENUM_BEGIN", 4);
    		try
    		{
    		int _type = ENUM_BEGIN;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:10:12: ( 'EnumBegin' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:10:14: 'EnumBegin'
    		{
    		DebugLocation(10, 14);
    		Match("EnumBegin"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ENUM_BEGIN", 4);
    		LeaveRule("ENUM_BEGIN", 4);
    		LeaveRule_ENUM_BEGIN();
        }
    }
    // $ANTLR end "ENUM_BEGIN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ENUM_END() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ENUM_END() {}

    // $ANTLR start "ENUM_END"
    [GrammarRule("ENUM_END")]
    private void mENUM_END()
    {
    	EnterRule_ENUM_END();
    	EnterRule("ENUM_END", 5);
    	TraceIn("ENUM_END", 5);
    		try
    		{
    		int _type = ENUM_END;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:11:10: ( 'EnumEnd' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:11:12: 'EnumEnd'
    		{
    		DebugLocation(11, 12);
    		Match("EnumEnd"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ENUM_END", 5);
    		LeaveRule("ENUM_END", 5);
    		LeaveRule_ENUM_END();
        }
    }
    // $ANTLR end "ENUM_END"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ENUM_ENTRY() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ENUM_ENTRY() {}

    // $ANTLR start "ENUM_ENTRY"
    [GrammarRule("ENUM_ENTRY")]
    private void mENUM_ENTRY()
    {
    	EnterRule_ENUM_ENTRY();
    	EnterRule("ENUM_ENTRY", 6);
    	TraceIn("ENUM_ENTRY", 6);
    		try
    		{
    		int _type = ENUM_ENTRY;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:12:12: ( 'EnumEntry' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:12:14: 'EnumEntry'
    		{
    		DebugLocation(12, 14);
    		Match("EnumEntry"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ENUM_ENTRY", 6);
    		LeaveRule("ENUM_ENTRY", 6);
    		LeaveRule_ENUM_ENTRY();
        }
    }
    // $ANTLR end "ENUM_ENTRY"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_EQUALS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_EQUALS() {}

    // $ANTLR start "EQUALS"
    [GrammarRule("EQUALS")]
    private void mEQUALS()
    {
    	EnterRule_EQUALS();
    	EnterRule("EQUALS", 7);
    	TraceIn("EQUALS", 7);
    		try
    		{
    		int _type = EQUALS;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:13:8: ( '=' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:13:10: '='
    		{
    		DebugLocation(13, 10);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("EQUALS", 7);
    		LeaveRule("EQUALS", 7);
    		LeaveRule_EQUALS();
        }
    }
    // $ANTLR end "EQUALS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LBRACE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LBRACE() {}

    // $ANTLR start "LBRACE"
    [GrammarRule("LBRACE")]
    private void mLBRACE()
    {
    	EnterRule_LBRACE();
    	EnterRule("LBRACE", 8);
    	TraceIn("LBRACE", 8);
    		try
    		{
    		int _type = LBRACE;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:14:8: ( '{' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:14:10: '{'
    		{
    		DebugLocation(14, 10);
    		Match('{'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("LBRACE", 8);
    		LeaveRule("LBRACE", 8);
    		LeaveRule_LBRACE();
        }
    }
    // $ANTLR end "LBRACE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LEFT_SHIFT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LEFT_SHIFT() {}

    // $ANTLR start "LEFT_SHIFT"
    [GrammarRule("LEFT_SHIFT")]
    private void mLEFT_SHIFT()
    {
    	EnterRule_LEFT_SHIFT();
    	EnterRule("LEFT_SHIFT", 9);
    	TraceIn("LEFT_SHIFT", 9);
    		try
    		{
    		int _type = LEFT_SHIFT;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:15:12: ( '<<' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:15:14: '<<'
    		{
    		DebugLocation(15, 14);
    		Match("<<"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("LEFT_SHIFT", 9);
    		LeaveRule("LEFT_SHIFT", 9);
    		LeaveRule_LEFT_SHIFT();
        }
    }
    // $ANTLR end "LEFT_SHIFT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LPAREN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LPAREN() {}

    // $ANTLR start "LPAREN"
    [GrammarRule("LPAREN")]
    private void mLPAREN()
    {
    	EnterRule_LPAREN();
    	EnterRule("LPAREN", 10);
    	TraceIn("LPAREN", 10);
    		try
    		{
    		int _type = LPAREN;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:16:8: ( '(' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:16:10: '('
    		{
    		DebugLocation(16, 10);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("LPAREN", 10);
    		LeaveRule("LPAREN", 10);
    		LeaveRule_LPAREN();
        }
    }
    // $ANTLR end "LPAREN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_META() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_META() {}

    // $ANTLR start "META"
    [GrammarRule("META")]
    private void mMETA()
    {
    	EnterRule_META();
    	EnterRule("META", 11);
    	TraceIn("META", 11);
    		try
    		{
    		int _type = META;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:17:6: ( '//:' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:17:8: '//:'
    		{
    		DebugLocation(17, 8);
    		Match("//:"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("META", 11);
    		LeaveRule("META", 11);
    		LeaveRule_META();
        }
    }
    // $ANTLR end "META"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_RBRACE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_RBRACE() {}

    // $ANTLR start "RBRACE"
    [GrammarRule("RBRACE")]
    private void mRBRACE()
    {
    	EnterRule_RBRACE();
    	EnterRule("RBRACE", 12);
    	TraceIn("RBRACE", 12);
    		try
    		{
    		int _type = RBRACE;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:18:8: ( '}' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:18:10: '}'
    		{
    		DebugLocation(18, 10);
    		Match('}'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("RBRACE", 12);
    		LeaveRule("RBRACE", 12);
    		LeaveRule_RBRACE();
        }
    }
    // $ANTLR end "RBRACE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_RPAREN() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_RPAREN() {}

    // $ANTLR start "RPAREN"
    [GrammarRule("RPAREN")]
    private void mRPAREN()
    {
    	EnterRule_RPAREN();
    	EnterRule("RPAREN", 13);
    	TraceIn("RPAREN", 13);
    		try
    		{
    		int _type = RPAREN;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:19:8: ( ')' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:19:10: ')'
    		{
    		DebugLocation(19, 10);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("RPAREN", 13);
    		LeaveRule("RPAREN", 13);
    		LeaveRule_RPAREN();
        }
    }
    // $ANTLR end "RPAREN"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_SEMICOLON() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_SEMICOLON() {}

    // $ANTLR start "SEMICOLON"
    [GrammarRule("SEMICOLON")]
    private void mSEMICOLON()
    {
    	EnterRule_SEMICOLON();
    	EnterRule("SEMICOLON", 14);
    	TraceIn("SEMICOLON", 14);
    		try
    		{
    		int _type = SEMICOLON;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:20:11: ( ';' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:20:13: ';'
    		{
    		DebugLocation(20, 13);
    		Match(';'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("SEMICOLON", 14);
    		LeaveRule("SEMICOLON", 14);
    		LeaveRule_SEMICOLON();
        }
    }
    // $ANTLR end "SEMICOLON"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ID() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ID() {}

    // $ANTLR start "ID"
    [GrammarRule("ID")]
    private void mID()
    {
    	EnterRule_ID();
    	EnterRule("ID", 15);
    	TraceIn("ID", 15);
    		try
    		{
    		int _type = ID;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:68:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:68:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    		{
    		DebugLocation(68, 7);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(68, 31);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:68:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_0 = input.LA(1);

    			if (((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch ( alt1 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
    				{
    				DebugLocation(68, 31);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop1;
    			}
    		}

    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ID", 15);
    		LeaveRule("ID", 15);
    		LeaveRule_ID();
        }
    }
    // $ANTLR end "ID"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WHITESPACE() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WHITESPACE() {}

    // $ANTLR start "WHITESPACE"
    [GrammarRule("WHITESPACE")]
    private void mWHITESPACE()
    {
    	EnterRule_WHITESPACE();
    	EnterRule("WHITESPACE", 16);
    	TraceIn("WHITESPACE", 16);
    		try
    		{
    		int _type = WHITESPACE;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:72:2: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:72:6: ( ' ' | '\\t' | '\\r' | '\\n' )
    		{
    		DebugLocation(72, 6);
    		if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(72, 35);
    		_channel=Hidden;

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WHITESPACE", 16);
    		LeaveRule("WHITESPACE", 16);
    		LeaveRule_WHITESPACE();
        }
    }
    // $ANTLR end "WHITESPACE"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_STRING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_STRING() {}

    // $ANTLR start "STRING"
    [GrammarRule("STRING")]
    private void mSTRING()
    {
    	EnterRule_STRING();
    	EnterRule("STRING", 17);
    	TraceIn("STRING", 17);
    		try
    		{
    		int _type = STRING;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:75:6: ( '\"' (~ ( '\\\\' | '\"' ) )* '\"' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:75:9: '\"' (~ ( '\\\\' | '\"' ) )* '\"'
    		{
    		DebugLocation(75, 9);
    		Match('\"'); 
    		DebugLocation(75, 13);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:75:13: (~ ( '\\\\' | '\"' ) )*
    		try { DebugEnterSubRule(2);
    		while (true)
    		{
    			int alt2=2;
    			try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    			int LA2_0 = input.LA(1);

    			if (((LA2_0>='\u0000' && LA2_0<='!')||(LA2_0>='#' && LA2_0<='[')||(LA2_0>=']' && LA2_0<='\uFFFF')))
    			{
    				alt2 = 1;
    			}


    			} finally { DebugExitDecision(2); }
    			switch ( alt2 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
    				{
    				DebugLocation(75, 13);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop2;
    			}
    		}

    		loop2:
    			;

    		} finally { DebugExitSubRule(2); }

    		DebugLocation(75, 30);
    		Match('\"'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("STRING", 17);
    		LeaveRule("STRING", 17);
    		LeaveRule_STRING();
        }
    }
    // $ANTLR end "STRING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_POSITIVE_INTEGER16() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_POSITIVE_INTEGER16() {}

    // $ANTLR start "POSITIVE_INTEGER16"
    [GrammarRule("POSITIVE_INTEGER16")]
    private void mPOSITIVE_INTEGER16()
    {
    	EnterRule_POSITIVE_INTEGER16();
    	EnterRule("POSITIVE_INTEGER16", 18);
    	TraceIn("POSITIVE_INTEGER16", 18);
    		try
    		{
    		int _type = POSITIVE_INTEGER16;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:78:2: ( '0x' ( HEX_DIGIT )+ )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:78:4: '0x' ( HEX_DIGIT )+
    		{
    		DebugLocation(78, 4);
    		Match("0x"); 

    		DebugLocation(78, 9);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:78:9: ( HEX_DIGIT )+
    		int cnt3=0;
    		try { DebugEnterSubRule(3);
    		while (true)
    		{
    			int alt3=2;
    			try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    			int LA3_0 = input.LA(1);

    			if (((LA3_0>='0' && LA3_0<='9')||(LA3_0>='A' && LA3_0<='F')||(LA3_0>='a' && LA3_0<='f')))
    			{
    				alt3 = 1;
    			}


    			} finally { DebugExitDecision(3); }
    			switch (alt3)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
    				{
    				DebugLocation(78, 9);
    				input.Consume();


    				}
    				break;

    			default:
    				if (cnt3 >= 1)
    					goto loop3;

    				EarlyExitException eee3 = new EarlyExitException( 3, input );
    				DebugRecognitionException(eee3);
    				throw eee3;
    			}
    			cnt3++;
    		}
    		loop3:
    			;

    		} finally { DebugExitSubRule(3); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("POSITIVE_INTEGER16", 18);
    		LeaveRule("POSITIVE_INTEGER16", 18);
    		LeaveRule_POSITIVE_INTEGER16();
        }
    }
    // $ANTLR end "POSITIVE_INTEGER16"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_POSITIVE_INTEGER10() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_POSITIVE_INTEGER10() {}

    // $ANTLR start "POSITIVE_INTEGER10"
    [GrammarRule("POSITIVE_INTEGER10")]
    private void mPOSITIVE_INTEGER10()
    {
    	EnterRule_POSITIVE_INTEGER10();
    	EnterRule("POSITIVE_INTEGER10", 19);
    	TraceIn("POSITIVE_INTEGER10", 19);
    		try
    		{
    		int _type = POSITIVE_INTEGER10;
    		int _channel = DefaultTokenChannel;
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:81:2: ( ( '0' | ( POS_DIGIT ( DIGIT )* ) ) )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:81:4: ( '0' | ( POS_DIGIT ( DIGIT )* ) )
    		{
    		DebugLocation(81, 4);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:81:4: ( '0' | ( POS_DIGIT ( DIGIT )* ) )
    		int alt5=2;
    		try { DebugEnterSubRule(5);
    		try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    		int LA5_0 = input.LA(1);

    		if ((LA5_0=='0'))
    		{
    			alt5 = 1;
    		}
    		else if (((LA5_0>='1' && LA5_0<='9')))
    		{
    			alt5 = 2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(5); }
    		switch (alt5)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:81:6: '0'
    			{
    			DebugLocation(81, 6);
    			Match('0'); 

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:81:12: ( POS_DIGIT ( DIGIT )* )
    			{
    			DebugLocation(81, 12);
    			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:81:12: ( POS_DIGIT ( DIGIT )* )
    			DebugEnterAlt(1);
    			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:81:14: POS_DIGIT ( DIGIT )*
    			{
    			DebugLocation(81, 14);
    			mPOS_DIGIT(); 
    			DebugLocation(81, 24);
    			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:81:24: ( DIGIT )*
    			try { DebugEnterSubRule(4);
    			while (true)
    			{
    				int alt4=2;
    				try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    				int LA4_0 = input.LA(1);

    				if (((LA4_0>='0' && LA4_0<='9')))
    				{
    					alt4 = 1;
    				}


    				} finally { DebugExitDecision(4); }
    				switch ( alt4 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
    					{
    					DebugLocation(81, 24);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop4;
    				}
    			}

    			loop4:
    				;

    			} finally { DebugExitSubRule(4); }


    			}


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(5); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("POSITIVE_INTEGER10", 19);
    		LeaveRule("POSITIVE_INTEGER10", 19);
    		LeaveRule_POSITIVE_INTEGER10();
        }
    }
    // $ANTLR end "POSITIVE_INTEGER10"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_POS_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_POS_DIGIT() {}

    // $ANTLR start "POS_DIGIT"
    [GrammarRule("POS_DIGIT")]
    private void mPOS_DIGIT()
    {
    	EnterRule_POS_DIGIT();
    	EnterRule("POS_DIGIT", 20);
    	TraceIn("POS_DIGIT", 20);
    		try
    		{
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:84:2: ( '1' .. '9' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
    		{
    		DebugLocation(84, 2);
    		if ((input.LA(1)>='1' && input.LA(1)<='9'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("POS_DIGIT", 20);
    		LeaveRule("POS_DIGIT", 20);
    		LeaveRule_POS_DIGIT();
        }
    }
    // $ANTLR end "POS_DIGIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_DIGIT() {}

    // $ANTLR start "DIGIT"
    [GrammarRule("DIGIT")]
    private void mDIGIT()
    {
    	EnterRule_DIGIT();
    	EnterRule("DIGIT", 21);
    	TraceIn("DIGIT", 21);
    		try
    		{
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:87:2: ( '0' .. '9' )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
    		{
    		DebugLocation(87, 2);
    		if ((input.LA(1)>='0' && input.LA(1)<='9'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("DIGIT", 21);
    		LeaveRule("DIGIT", 21);
    		LeaveRule_DIGIT();
        }
    }
    // $ANTLR end "DIGIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_HEX_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_HEX_DIGIT() {}

    // $ANTLR start "HEX_DIGIT"
    [GrammarRule("HEX_DIGIT")]
    private void mHEX_DIGIT()
    {
    	EnterRule_HEX_DIGIT();
    	EnterRule("HEX_DIGIT", 22);
    	TraceIn("HEX_DIGIT", 22);
    		try
    		{
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:90:2: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
    		{
    		DebugLocation(90, 2);
    		if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("HEX_DIGIT", 22);
    		LeaveRule("HEX_DIGIT", 22);
    		LeaveRule_HEX_DIGIT();
        }
    }
    // $ANTLR end "HEX_DIGIT"

    public override void mTokens()
    {
    	// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:8: ( BITFIELD | COMMA | ENUM | ENUM_BEGIN | ENUM_END | ENUM_ENTRY | EQUALS | LBRACE | LEFT_SHIFT | LPAREN | META | RBRACE | RPAREN | SEMICOLON | ID | WHITESPACE | STRING | POSITIVE_INTEGER16 | POSITIVE_INTEGER10 )
    	int alt6=19;
    	try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    	switch (input.LA(1))
    	{
    	case 'B':
    		{
    		int LA6_1 = input.LA(2);

    		if ((LA6_1=='I'))
    		{
    			int LA6_18 = input.LA(3);

    			if ((LA6_18=='T'))
    			{
    				int LA6_22 = input.LA(4);

    				if ((LA6_22=='F'))
    				{
    					int LA6_25 = input.LA(5);

    					if ((LA6_25=='I'))
    					{
    						int LA6_28 = input.LA(6);

    						if ((LA6_28=='E'))
    						{
    							int LA6_32 = input.LA(7);

    							if ((LA6_32=='L'))
    							{
    								int LA6_35 = input.LA(8);

    								if ((LA6_35=='D'))
    								{
    									int LA6_39 = input.LA(9);

    									if (((LA6_39>='0' && LA6_39<='9')||(LA6_39>='A' && LA6_39<='Z')||LA6_39=='_'||(LA6_39>='a' && LA6_39<='z')))
    									{
    										alt6 = 15;
    									}
    									else
    									{
    										alt6 = 1;
    									}
    								}
    								else
    								{
    									alt6 = 15;
    								}
    							}
    							else
    							{
    								alt6 = 15;
    							}
    						}
    						else
    						{
    							alt6 = 15;
    						}
    					}
    					else
    					{
    						alt6 = 15;
    					}
    				}
    				else
    				{
    					alt6 = 15;
    				}
    			}
    			else
    			{
    				alt6 = 15;
    			}
    		}
    		else
    		{
    			alt6 = 15;
    		}
    		}
    		break;
    	case ',':
    		{
    		alt6 = 2;
    		}
    		break;
    	case 'e':
    		{
    		int LA6_3 = input.LA(2);

    		if ((LA6_3=='n'))
    		{
    			int LA6_19 = input.LA(3);

    			if ((LA6_19=='u'))
    			{
    				int LA6_23 = input.LA(4);

    				if ((LA6_23=='m'))
    				{
    					int LA6_26 = input.LA(5);

    					if (((LA6_26>='0' && LA6_26<='9')||(LA6_26>='A' && LA6_26<='Z')||LA6_26=='_'||(LA6_26>='a' && LA6_26<='z')))
    					{
    						alt6 = 15;
    					}
    					else
    					{
    						alt6 = 3;
    					}
    				}
    				else
    				{
    					alt6 = 15;
    				}
    			}
    			else
    			{
    				alt6 = 15;
    			}
    		}
    		else
    		{
    			alt6 = 15;
    		}
    		}
    		break;
    	case 'E':
    		{
    		int LA6_4 = input.LA(2);

    		if ((LA6_4=='n'))
    		{
    			int LA6_20 = input.LA(3);

    			if ((LA6_20=='u'))
    			{
    				int LA6_24 = input.LA(4);

    				if ((LA6_24=='m'))
    				{
    					switch (input.LA(5))
    					{
    					case 'B':
    						{
    						int LA6_30 = input.LA(6);

    						if ((LA6_30=='e'))
    						{
    							int LA6_33 = input.LA(7);

    							if ((LA6_33=='g'))
    							{
    								int LA6_36 = input.LA(8);

    								if ((LA6_36=='i'))
    								{
    									int LA6_40 = input.LA(9);

    									if ((LA6_40=='n'))
    									{
    										int LA6_44 = input.LA(10);

    										if (((LA6_44>='0' && LA6_44<='9')||(LA6_44>='A' && LA6_44<='Z')||LA6_44=='_'||(LA6_44>='a' && LA6_44<='z')))
    										{
    											alt6 = 15;
    										}
    										else
    										{
    											alt6 = 4;
    										}
    									}
    									else
    									{
    										alt6 = 15;
    									}
    								}
    								else
    								{
    									alt6 = 15;
    								}
    							}
    							else
    							{
    								alt6 = 15;
    							}
    						}
    						else
    						{
    							alt6 = 15;
    						}
    						}
    						break;
    					case 'E':
    						{
    						int LA6_31 = input.LA(6);

    						if ((LA6_31=='n'))
    						{
    							switch (input.LA(7))
    							{
    							case 'd':
    								{
    								int LA6_37 = input.LA(8);

    								if (((LA6_37>='0' && LA6_37<='9')||(LA6_37>='A' && LA6_37<='Z')||LA6_37=='_'||(LA6_37>='a' && LA6_37<='z')))
    								{
    									alt6 = 15;
    								}
    								else
    								{
    									alt6 = 5;
    								}
    								}
    								break;
    							case 't':
    								{
    								int LA6_38 = input.LA(8);

    								if ((LA6_38=='r'))
    								{
    									int LA6_42 = input.LA(9);

    									if ((LA6_42=='y'))
    									{
    										int LA6_45 = input.LA(10);

    										if (((LA6_45>='0' && LA6_45<='9')||(LA6_45>='A' && LA6_45<='Z')||LA6_45=='_'||(LA6_45>='a' && LA6_45<='z')))
    										{
    											alt6 = 15;
    										}
    										else
    										{
    											alt6 = 6;
    										}
    									}
    									else
    									{
    										alt6 = 15;
    									}
    								}
    								else
    								{
    									alt6 = 15;
    								}
    								}
    								break;
    							default:
    								alt6=15;
    								break;

    							}

    						}
    						else
    						{
    							alt6 = 15;
    						}
    						}
    						break;
    					default:
    						alt6=15;
    						break;

    					}

    				}
    				else
    				{
    					alt6 = 15;
    				}
    			}
    			else
    			{
    				alt6 = 15;
    			}
    		}
    		else
    		{
    			alt6 = 15;
    		}
    		}
    		break;
    	case '=':
    		{
    		alt6 = 7;
    		}
    		break;
    	case '{':
    		{
    		alt6 = 8;
    		}
    		break;
    	case '<':
    		{
    		alt6 = 9;
    		}
    		break;
    	case '(':
    		{
    		alt6 = 10;
    		}
    		break;
    	case '/':
    		{
    		alt6 = 11;
    		}
    		break;
    	case '}':
    		{
    		alt6 = 12;
    		}
    		break;
    	case ')':
    		{
    		alt6 = 13;
    		}
    		break;
    	case ';':
    		{
    		alt6 = 14;
    		}
    		break;
    	case 'A':
    	case 'C':
    	case 'D':
    	case 'F':
    	case 'G':
    	case 'H':
    	case 'I':
    	case 'J':
    	case 'K':
    	case 'L':
    	case 'M':
    	case 'N':
    	case 'O':
    	case 'P':
    	case 'Q':
    	case 'R':
    	case 'S':
    	case 'T':
    	case 'U':
    	case 'V':
    	case 'W':
    	case 'X':
    	case 'Y':
    	case 'Z':
    	case '_':
    	case 'a':
    	case 'b':
    	case 'c':
    	case 'd':
    	case 'f':
    	case 'g':
    	case 'h':
    	case 'i':
    	case 'j':
    	case 'k':
    	case 'l':
    	case 'm':
    	case 'n':
    	case 'o':
    	case 'p':
    	case 'q':
    	case 'r':
    	case 's':
    	case 't':
    	case 'u':
    	case 'v':
    	case 'w':
    	case 'x':
    	case 'y':
    	case 'z':
    		{
    		alt6 = 15;
    		}
    		break;
    	case '\t':
    	case '\n':
    	case '\r':
    	case ' ':
    		{
    		alt6 = 16;
    		}
    		break;
    	case '\"':
    		{
    		alt6 = 17;
    		}
    		break;
    	case '0':
    		{
    		int LA6_16 = input.LA(2);

    		if ((LA6_16=='x'))
    		{
    			alt6 = 18;
    		}
    		else
    		{
    			alt6 = 19;
    		}
    		}
    		break;
    	case '1':
    	case '2':
    	case '3':
    	case '4':
    	case '5':
    	case '6':
    	case '7':
    	case '8':
    	case '9':
    		{
    		alt6 = 19;
    		}
    		break;
    	default:
    		{
    			NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    	}

    	} finally { DebugExitDecision(6); }
    	switch (alt6)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:10: BITFIELD
    		{
    		DebugLocation(1, 10);
    		mBITFIELD(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:19: COMMA
    		{
    		DebugLocation(1, 19);
    		mCOMMA(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:25: ENUM
    		{
    		DebugLocation(1, 25);
    		mENUM(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:30: ENUM_BEGIN
    		{
    		DebugLocation(1, 30);
    		mENUM_BEGIN(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:41: ENUM_END
    		{
    		DebugLocation(1, 41);
    		mENUM_END(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:50: ENUM_ENTRY
    		{
    		DebugLocation(1, 50);
    		mENUM_ENTRY(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:61: EQUALS
    		{
    		DebugLocation(1, 61);
    		mEQUALS(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:68: LBRACE
    		{
    		DebugLocation(1, 68);
    		mLBRACE(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:75: LEFT_SHIFT
    		{
    		DebugLocation(1, 75);
    		mLEFT_SHIFT(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:86: LPAREN
    		{
    		DebugLocation(1, 86);
    		mLPAREN(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:93: META
    		{
    		DebugLocation(1, 93);
    		mMETA(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:98: RBRACE
    		{
    		DebugLocation(1, 98);
    		mRBRACE(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:105: RPAREN
    		{
    		DebugLocation(1, 105);
    		mRPAREN(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:112: SEMICOLON
    		{
    		DebugLocation(1, 112);
    		mSEMICOLON(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:122: ID
    		{
    		DebugLocation(1, 122);
    		mID(); 

    		}
    		break;
    	case 16:
    		DebugEnterAlt(16);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:125: WHITESPACE
    		{
    		DebugLocation(1, 125);
    		mWHITESPACE(); 

    		}
    		break;
    	case 17:
    		DebugEnterAlt(17);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:136: STRING
    		{
    		DebugLocation(1, 136);
    		mSTRING(); 

    		}
    		break;
    	case 18:
    		DebugEnterAlt(18);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:143: POSITIVE_INTEGER16
    		{
    		DebugLocation(1, 143);
    		mPOSITIVE_INTEGER16(); 

    		}
    		break;
    	case 19:
    		DebugEnterAlt(19);
    		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:162: POSITIVE_INTEGER10
    		{
    		DebugLocation(1, 162);
    		mPOSITIVE_INTEGER10(); 

    		}
    		break;

    	}

    }


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}
