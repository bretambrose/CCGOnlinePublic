/**********************************************************************************************************************

	RegisterIPDatabaseEnums.cpp
		A component that registers project-specific enum conversions.
		DO NOT EDIT THIS FILE; it is automatically generated.

	(c) Copyright 2011, Bret Ambrose (mailto:bretambrose@gmail.com).

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.

**********************************************************************************************************************/

#include <IPDatabase/GeneratedCode/RegisterIPDatabaseEnums.h>

#include <IPShared/EnumConversion.h>

using namespace IP::Enum;

enum DBErrorStateType;
enum EDatabaseVariableType;
enum EDatabaseVariableValueType;

void Register_IPDatabase_Enums( void )
{
	IP::Enum::CEnumConverter::Register_Enum< DBErrorStateType >( "DBErrorStateType", EConvertibleEnumProperties::CEP_NONE );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "SUCCESS", static_cast< DBErrorStateType >( 0 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "FATAL ERROR", static_cast< DBErrorStateType >( 1 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "RECOVERABLE ERROR", static_cast< DBErrorStateType >( 2 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "WARNING", static_cast< DBErrorStateType >( 3 ) );

	IP::Enum::CEnumConverter::Register_Enum< EDatabaseVariableType >( "EDatabaseVariableType", EConvertibleEnumProperties::CEP_NONE );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "IN", static_cast< EDatabaseVariableType >( 0 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "INOUT", static_cast< EDatabaseVariableType >( 1 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "OUT", static_cast< EDatabaseVariableType >( 2 ) );

	IP::Enum::CEnumConverter::Register_Enum< EDatabaseVariableValueType >( "EDatabaseVariableValueType", EConvertibleEnumProperties::CEP_NONE );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "INT32", static_cast< EDatabaseVariableValueType >( 1 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "UINT32", static_cast< EDatabaseVariableValueType >( 2 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "INT64", static_cast< EDatabaseVariableValueType >( 3 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "UINT64", static_cast< EDatabaseVariableValueType >( 4 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "STRING", static_cast< EDatabaseVariableValueType >( 5 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "WSTRING", static_cast< EDatabaseVariableValueType >( 6 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "FLOAT", static_cast< EDatabaseVariableValueType >( 7 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "DOUBLE", static_cast< EDatabaseVariableValueType >( 8 ) );
	IP::Enum::CEnumConverter::Register_Enum_Entry( "BOOLEAN", static_cast< EDatabaseVariableValueType >( 9 ) );

}
