/**********************************************************************************************************************

	StructuredExceptionInfo.cpp
		A component that holds data about an exception.  OS-specific logic extracts call stack and context information
			and adds it to this OS-agnostic object.

	(c) Copyright 2011, Bret Ambrose (mailto:bretambrose@gmail.com).

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.

**********************************************************************************************************************/

#include "stdafx.h"

#include "StructuredExceptionInfo.h"

/**********************************************************************************************************************
	CStackFrame::CStackFrame - default constructor

**********************************************************************************************************************/
CStackFrame::CStackFrame( void ) :
	Address( 0 ),
	FunctionName( L"" ),
	ModuleName( L"" ),
	FileName( L"" ),
	LineNumber( 0 )
{
}

/**********************************************************************************************************************
	CStackFrame::CStackFrame - copy constructor

		rhs -- object to copy from

**********************************************************************************************************************/
CStackFrame::CStackFrame( const CStackFrame &rhs ) :
	Address( rhs.Address ),
	FunctionName( rhs.FunctionName ),
	ModuleName( rhs.ModuleName ),
	FileName( rhs.FileName ),
	LineNumber( rhs.LineNumber )
{
}

/**********************************************************************************************************************
	CStackFrame::CStackFrame - constructor for system stack frames (no source info)

		address -- virtual address of the function
		function_name -- name of the function
		module_name -- module the function is located in

**********************************************************************************************************************/
CStackFrame::CStackFrame( uint64 address, const std::wstring &function_name, const std::wstring &module_name ) :
	Address( address ),
	FunctionName( function_name ),
	ModuleName( module_name ),
	FileName( L"" ),
	LineNumber( 0 )
{
}

/**********************************************************************************************************************
	CStackFrame::CStackFrame - constructor for user stack frames (has source info)

		address -- virtual address of the function
		function_name -- name of the function the exception occurred in
		module_name -- module the function is located in
		file_name -- file the function is located in
		line_number -- line number the exception occurred at

**********************************************************************************************************************/
CStackFrame::CStackFrame( uint64 address, const std::wstring &function_name, const std::wstring &module_name, const std::wstring &file_name, uint64 line_number ) :
	Address( address ),
	FunctionName( function_name ),
	ModuleName( module_name ),
	FileName( file_name ),
	LineNumber( line_number )
{
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**********************************************************************************************************************
	CStructuredExceptionInfo::CStructuredExceptionInfo - constructor 

		is_test_exception -- is this exception being generated by a unit test?  Used to control recovery since we don't
			want to rethrow the exception in this case, while normally we do

**********************************************************************************************************************/
CStructuredExceptionInfo::CStructuredExceptionInfo( bool is_test_exception ) :
	ProcessID( 0 ),
	CallStack(),
	SymbolError( L"" ),
	ExceptionMessage( L"" ),
	IsTestException( is_test_exception )
{
}
