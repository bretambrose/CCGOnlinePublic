//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g 2012-12-08 12:46:11

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
public partial class EnumReflectorLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int BITFIELD=4;
	public const int COMMA=5;
	public const int DIGIT=6;
	public const int ENUM=7;
	public const int ENUM_BEGIN=8;
	public const int ENUM_END=9;
	public const int ENUM_ENTRY=10;
	public const int EQUALS=11;
	public const int EXTENDS=12;
	public const int HEX_DIGIT=13;
	public const int ID=14;
	public const int IDQUALIFIER=15;
	public const int LBRACE=16;
	public const int LEFT_SHIFT=17;
	public const int LPAREN=18;
	public const int META=19;
	public const int NAMESPACE=20;
	public const int POSITIVE_INTEGER10=21;
	public const int POSITIVE_INTEGER16=22;
	public const int POS_DIGIT=23;
	public const int RBRACE=24;
	public const int RPAREN=25;
	public const int SEMICOLON=26;
	public const int STRING=27;
	public const int WHITESPACE=28;

    // delegates
    // delegators

	public EnumReflectorLexer()
	{
		OnCreated();
	}

	public EnumReflectorLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public EnumReflectorLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_BITFIELD();
	partial void LeaveRule_BITFIELD();

	// $ANTLR start "BITFIELD"
	[GrammarRule("BITFIELD")]
	private void mBITFIELD()
	{
		EnterRule_BITFIELD();
		EnterRule("BITFIELD", 1);
		TraceIn("BITFIELD", 1);
		try
		{
			int _type = BITFIELD;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:7:10: ( 'BITFIELD' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:7:12: 'BITFIELD'
			{
			DebugLocation(7, 12);
			Match("BITFIELD"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BITFIELD", 1);
			LeaveRule("BITFIELD", 1);
			LeaveRule_BITFIELD();
		}
	}
	// $ANTLR end "BITFIELD"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 2);
		TraceIn("COMMA", 2);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:8:7: ( ',' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:8:9: ','
			{
			DebugLocation(8, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 2);
			LeaveRule("COMMA", 2);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_ENUM();
	partial void LeaveRule_ENUM();

	// $ANTLR start "ENUM"
	[GrammarRule("ENUM")]
	private void mENUM()
	{
		EnterRule_ENUM();
		EnterRule("ENUM", 3);
		TraceIn("ENUM", 3);
		try
		{
			int _type = ENUM;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:9:6: ( 'enum' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:9:8: 'enum'
			{
			DebugLocation(9, 8);
			Match("enum"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ENUM", 3);
			LeaveRule("ENUM", 3);
			LeaveRule_ENUM();
		}
	}
	// $ANTLR end "ENUM"

	partial void EnterRule_ENUM_BEGIN();
	partial void LeaveRule_ENUM_BEGIN();

	// $ANTLR start "ENUM_BEGIN"
	[GrammarRule("ENUM_BEGIN")]
	private void mENUM_BEGIN()
	{
		EnterRule_ENUM_BEGIN();
		EnterRule("ENUM_BEGIN", 4);
		TraceIn("ENUM_BEGIN", 4);
		try
		{
			int _type = ENUM_BEGIN;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:10:12: ( 'EnumBegin' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:10:14: 'EnumBegin'
			{
			DebugLocation(10, 14);
			Match("EnumBegin"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ENUM_BEGIN", 4);
			LeaveRule("ENUM_BEGIN", 4);
			LeaveRule_ENUM_BEGIN();
		}
	}
	// $ANTLR end "ENUM_BEGIN"

	partial void EnterRule_ENUM_END();
	partial void LeaveRule_ENUM_END();

	// $ANTLR start "ENUM_END"
	[GrammarRule("ENUM_END")]
	private void mENUM_END()
	{
		EnterRule_ENUM_END();
		EnterRule("ENUM_END", 5);
		TraceIn("ENUM_END", 5);
		try
		{
			int _type = ENUM_END;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:11:10: ( 'EnumEnd' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:11:12: 'EnumEnd'
			{
			DebugLocation(11, 12);
			Match("EnumEnd"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ENUM_END", 5);
			LeaveRule("ENUM_END", 5);
			LeaveRule_ENUM_END();
		}
	}
	// $ANTLR end "ENUM_END"

	partial void EnterRule_ENUM_ENTRY();
	partial void LeaveRule_ENUM_ENTRY();

	// $ANTLR start "ENUM_ENTRY"
	[GrammarRule("ENUM_ENTRY")]
	private void mENUM_ENTRY()
	{
		EnterRule_ENUM_ENTRY();
		EnterRule("ENUM_ENTRY", 6);
		TraceIn("ENUM_ENTRY", 6);
		try
		{
			int _type = ENUM_ENTRY;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:12:12: ( 'EnumEntry' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:12:14: 'EnumEntry'
			{
			DebugLocation(12, 14);
			Match("EnumEntry"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ENUM_ENTRY", 6);
			LeaveRule("ENUM_ENTRY", 6);
			LeaveRule_ENUM_ENTRY();
		}
	}
	// $ANTLR end "ENUM_ENTRY"

	partial void EnterRule_EQUALS();
	partial void LeaveRule_EQUALS();

	// $ANTLR start "EQUALS"
	[GrammarRule("EQUALS")]
	private void mEQUALS()
	{
		EnterRule_EQUALS();
		EnterRule("EQUALS", 7);
		TraceIn("EQUALS", 7);
		try
		{
			int _type = EQUALS;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:13:8: ( '=' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:13:10: '='
			{
			DebugLocation(13, 10);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUALS", 7);
			LeaveRule("EQUALS", 7);
			LeaveRule_EQUALS();
		}
	}
	// $ANTLR end "EQUALS"

	partial void EnterRule_EXTENDS();
	partial void LeaveRule_EXTENDS();

	// $ANTLR start "EXTENDS"
	[GrammarRule("EXTENDS")]
	private void mEXTENDS()
	{
		EnterRule_EXTENDS();
		EnterRule("EXTENDS", 8);
		TraceIn("EXTENDS", 8);
		try
		{
			int _type = EXTENDS;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:14:9: ( 'extends' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:14:11: 'extends'
			{
			DebugLocation(14, 11);
			Match("extends"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EXTENDS", 8);
			LeaveRule("EXTENDS", 8);
			LeaveRule_EXTENDS();
		}
	}
	// $ANTLR end "EXTENDS"

	partial void EnterRule_IDQUALIFIER();
	partial void LeaveRule_IDQUALIFIER();

	// $ANTLR start "IDQUALIFIER"
	[GrammarRule("IDQUALIFIER")]
	private void mIDQUALIFIER()
	{
		EnterRule_IDQUALIFIER();
		EnterRule("IDQUALIFIER", 9);
		TraceIn("IDQUALIFIER", 9);
		try
		{
			int _type = IDQUALIFIER;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:15:13: ( '::' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:15:15: '::'
			{
			DebugLocation(15, 15);
			Match("::"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IDQUALIFIER", 9);
			LeaveRule("IDQUALIFIER", 9);
			LeaveRule_IDQUALIFIER();
		}
	}
	// $ANTLR end "IDQUALIFIER"

	partial void EnterRule_LBRACE();
	partial void LeaveRule_LBRACE();

	// $ANTLR start "LBRACE"
	[GrammarRule("LBRACE")]
	private void mLBRACE()
	{
		EnterRule_LBRACE();
		EnterRule("LBRACE", 10);
		TraceIn("LBRACE", 10);
		try
		{
			int _type = LBRACE;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:16:8: ( '{' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:16:10: '{'
			{
			DebugLocation(16, 10);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LBRACE", 10);
			LeaveRule("LBRACE", 10);
			LeaveRule_LBRACE();
		}
	}
	// $ANTLR end "LBRACE"

	partial void EnterRule_LEFT_SHIFT();
	partial void LeaveRule_LEFT_SHIFT();

	// $ANTLR start "LEFT_SHIFT"
	[GrammarRule("LEFT_SHIFT")]
	private void mLEFT_SHIFT()
	{
		EnterRule_LEFT_SHIFT();
		EnterRule("LEFT_SHIFT", 11);
		TraceIn("LEFT_SHIFT", 11);
		try
		{
			int _type = LEFT_SHIFT;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:17:12: ( '<<' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:17:14: '<<'
			{
			DebugLocation(17, 14);
			Match("<<"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LEFT_SHIFT", 11);
			LeaveRule("LEFT_SHIFT", 11);
			LeaveRule_LEFT_SHIFT();
		}
	}
	// $ANTLR end "LEFT_SHIFT"

	partial void EnterRule_LPAREN();
	partial void LeaveRule_LPAREN();

	// $ANTLR start "LPAREN"
	[GrammarRule("LPAREN")]
	private void mLPAREN()
	{
		EnterRule_LPAREN();
		EnterRule("LPAREN", 12);
		TraceIn("LPAREN", 12);
		try
		{
			int _type = LPAREN;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:18:8: ( '(' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:18:10: '('
			{
			DebugLocation(18, 10);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LPAREN", 12);
			LeaveRule("LPAREN", 12);
			LeaveRule_LPAREN();
		}
	}
	// $ANTLR end "LPAREN"

	partial void EnterRule_META();
	partial void LeaveRule_META();

	// $ANTLR start "META"
	[GrammarRule("META")]
	private void mMETA()
	{
		EnterRule_META();
		EnterRule("META", 13);
		TraceIn("META", 13);
		try
		{
			int _type = META;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:19:6: ( '//:' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:19:8: '//:'
			{
			DebugLocation(19, 8);
			Match("//:"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("META", 13);
			LeaveRule("META", 13);
			LeaveRule_META();
		}
	}
	// $ANTLR end "META"

	partial void EnterRule_NAMESPACE();
	partial void LeaveRule_NAMESPACE();

	// $ANTLR start "NAMESPACE"
	[GrammarRule("NAMESPACE")]
	private void mNAMESPACE()
	{
		EnterRule_NAMESPACE();
		EnterRule("NAMESPACE", 14);
		TraceIn("NAMESPACE", 14);
		try
		{
			int _type = NAMESPACE;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:20:11: ( 'namespace' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:20:13: 'namespace'
			{
			DebugLocation(20, 13);
			Match("namespace"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NAMESPACE", 14);
			LeaveRule("NAMESPACE", 14);
			LeaveRule_NAMESPACE();
		}
	}
	// $ANTLR end "NAMESPACE"

	partial void EnterRule_RBRACE();
	partial void LeaveRule_RBRACE();

	// $ANTLR start "RBRACE"
	[GrammarRule("RBRACE")]
	private void mRBRACE()
	{
		EnterRule_RBRACE();
		EnterRule("RBRACE", 15);
		TraceIn("RBRACE", 15);
		try
		{
			int _type = RBRACE;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:21:8: ( '}' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:21:10: '}'
			{
			DebugLocation(21, 10);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RBRACE", 15);
			LeaveRule("RBRACE", 15);
			LeaveRule_RBRACE();
		}
	}
	// $ANTLR end "RBRACE"

	partial void EnterRule_RPAREN();
	partial void LeaveRule_RPAREN();

	// $ANTLR start "RPAREN"
	[GrammarRule("RPAREN")]
	private void mRPAREN()
	{
		EnterRule_RPAREN();
		EnterRule("RPAREN", 16);
		TraceIn("RPAREN", 16);
		try
		{
			int _type = RPAREN;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:22:8: ( ')' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:22:10: ')'
			{
			DebugLocation(22, 10);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("RPAREN", 16);
			LeaveRule("RPAREN", 16);
			LeaveRule_RPAREN();
		}
	}
	// $ANTLR end "RPAREN"

	partial void EnterRule_SEMICOLON();
	partial void LeaveRule_SEMICOLON();

	// $ANTLR start "SEMICOLON"
	[GrammarRule("SEMICOLON")]
	private void mSEMICOLON()
	{
		EnterRule_SEMICOLON();
		EnterRule("SEMICOLON", 17);
		TraceIn("SEMICOLON", 17);
		try
		{
			int _type = SEMICOLON;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:23:11: ( ';' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:23:13: ';'
			{
			DebugLocation(23, 13);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMICOLON", 17);
			LeaveRule("SEMICOLON", 17);
			LeaveRule_SEMICOLON();
		}
	}
	// $ANTLR end "SEMICOLON"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 18);
		TraceIn("ID", 18);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:86:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:86:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(86, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(86, 31);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:86:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if (((LA1_0>='0' && LA1_0<='9')||(LA1_0>='A' && LA1_0<='Z')||LA1_0=='_'||(LA1_0>='a' && LA1_0<='z')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
					{
					DebugLocation(86, 31);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 18);
			LeaveRule("ID", 18);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_WHITESPACE();
	partial void LeaveRule_WHITESPACE();

	// $ANTLR start "WHITESPACE"
	[GrammarRule("WHITESPACE")]
	private void mWHITESPACE()
	{
		EnterRule_WHITESPACE();
		EnterRule("WHITESPACE", 19);
		TraceIn("WHITESPACE", 19);
		try
		{
			int _type = WHITESPACE;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:90:2: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:90:6: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(90, 6);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(90, 35);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHITESPACE", 19);
			LeaveRule("WHITESPACE", 19);
			LeaveRule_WHITESPACE();
		}
	}
	// $ANTLR end "WHITESPACE"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 20);
		TraceIn("STRING", 20);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:93:6: ( '\"' (~ ( '\\\\' | '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:93:9: '\"' (~ ( '\\\\' | '\"' ) )* '\"'
			{
			DebugLocation(93, 9);
			Match('\"'); 
			DebugLocation(93, 13);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:93:13: (~ ( '\\\\' | '\"' ) )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='\u0000' && LA2_0<='!')||(LA2_0>='#' && LA2_0<='[')||(LA2_0>=']' && LA2_0<='\uFFFF')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
					{
					DebugLocation(93, 13);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(93, 30);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 20);
			LeaveRule("STRING", 20);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_POSITIVE_INTEGER16();
	partial void LeaveRule_POSITIVE_INTEGER16();

	// $ANTLR start "POSITIVE_INTEGER16"
	[GrammarRule("POSITIVE_INTEGER16")]
	private void mPOSITIVE_INTEGER16()
	{
		EnterRule_POSITIVE_INTEGER16();
		EnterRule("POSITIVE_INTEGER16", 21);
		TraceIn("POSITIVE_INTEGER16", 21);
		try
		{
			int _type = POSITIVE_INTEGER16;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:96:2: ( '0x' ( HEX_DIGIT )+ )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:96:4: '0x' ( HEX_DIGIT )+
			{
			DebugLocation(96, 4);
			Match("0x"); 

			DebugLocation(96, 9);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:96:9: ( HEX_DIGIT )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')||(LA3_0>='A' && LA3_0<='F')||(LA3_0>='a' && LA3_0<='f')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
					{
					DebugLocation(96, 9);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("POSITIVE_INTEGER16", 21);
			LeaveRule("POSITIVE_INTEGER16", 21);
			LeaveRule_POSITIVE_INTEGER16();
		}
	}
	// $ANTLR end "POSITIVE_INTEGER16"

	partial void EnterRule_POSITIVE_INTEGER10();
	partial void LeaveRule_POSITIVE_INTEGER10();

	// $ANTLR start "POSITIVE_INTEGER10"
	[GrammarRule("POSITIVE_INTEGER10")]
	private void mPOSITIVE_INTEGER10()
	{
		EnterRule_POSITIVE_INTEGER10();
		EnterRule("POSITIVE_INTEGER10", 22);
		TraceIn("POSITIVE_INTEGER10", 22);
		try
		{
			int _type = POSITIVE_INTEGER10;
			int _channel = DefaultTokenChannel;
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:99:2: ( ( '0' | ( POS_DIGIT ( DIGIT )* ) ) )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:99:4: ( '0' | ( POS_DIGIT ( DIGIT )* ) )
			{
			DebugLocation(99, 4);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:99:4: ( '0' | ( POS_DIGIT ( DIGIT )* ) )
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0=='0'))
			{
				alt5 = 1;
			}
			else if (((LA5_0>='1' && LA5_0<='9')))
			{
				alt5 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:99:6: '0'
				{
				DebugLocation(99, 6);
				Match('0'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:99:12: ( POS_DIGIT ( DIGIT )* )
				{
				DebugLocation(99, 12);
				// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:99:12: ( POS_DIGIT ( DIGIT )* )
				DebugEnterAlt(1);
				// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:99:14: POS_DIGIT ( DIGIT )*
				{
				DebugLocation(99, 14);
				mPOS_DIGIT(); 
				DebugLocation(99, 24);
				// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:99:24: ( DIGIT )*
				try { DebugEnterSubRule(4);
				while (true)
				{
					int alt4=2;
					try { DebugEnterDecision(4, false);
					int LA4_0 = input.LA(1);

					if (((LA4_0>='0' && LA4_0<='9')))
					{
						alt4 = 1;
					}


					} finally { DebugExitDecision(4); }
					switch ( alt4 )
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
						{
						DebugLocation(99, 24);
						input.Consume();


						}
						break;

					default:
						goto loop4;
					}
				}

				loop4:
					;

				} finally { DebugExitSubRule(4); }


				}


				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("POSITIVE_INTEGER10", 22);
			LeaveRule("POSITIVE_INTEGER10", 22);
			LeaveRule_POSITIVE_INTEGER10();
		}
	}
	// $ANTLR end "POSITIVE_INTEGER10"

	partial void EnterRule_POS_DIGIT();
	partial void LeaveRule_POS_DIGIT();

	// $ANTLR start "POS_DIGIT"
	[GrammarRule("POS_DIGIT")]
	private void mPOS_DIGIT()
	{
		EnterRule_POS_DIGIT();
		EnterRule("POS_DIGIT", 23);
		TraceIn("POS_DIGIT", 23);
		try
		{
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:102:2: ( '1' .. '9' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
			{
			DebugLocation(102, 2);
			if ((input.LA(1)>='1' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("POS_DIGIT", 23);
			LeaveRule("POS_DIGIT", 23);
			LeaveRule_POS_DIGIT();
		}
	}
	// $ANTLR end "POS_DIGIT"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 24);
		TraceIn("DIGIT", 24);
		try
		{
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:105:2: ( '0' .. '9' )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
			{
			DebugLocation(105, 2);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 24);
			LeaveRule("DIGIT", 24);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_HEX_DIGIT();
	partial void LeaveRule_HEX_DIGIT();

	// $ANTLR start "HEX_DIGIT"
	[GrammarRule("HEX_DIGIT")]
	private void mHEX_DIGIT()
	{
		EnterRule_HEX_DIGIT();
		EnterRule("HEX_DIGIT", 25);
		TraceIn("HEX_DIGIT", 25);
		try
		{
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:108:2: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:
			{
			DebugLocation(108, 2);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("HEX_DIGIT", 25);
			LeaveRule("HEX_DIGIT", 25);
			LeaveRule_HEX_DIGIT();
		}
	}
	// $ANTLR end "HEX_DIGIT"

	public override void mTokens()
	{
		// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:8: ( BITFIELD | COMMA | ENUM | ENUM_BEGIN | ENUM_END | ENUM_ENTRY | EQUALS | EXTENDS | IDQUALIFIER | LBRACE | LEFT_SHIFT | LPAREN | META | NAMESPACE | RBRACE | RPAREN | SEMICOLON | ID | WHITESPACE | STRING | POSITIVE_INTEGER16 | POSITIVE_INTEGER10 )
		int alt6=22;
		try { DebugEnterDecision(6, false);
		try
		{
			alt6 = dfa6.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(6); }
		switch (alt6)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:10: BITFIELD
			{
			DebugLocation(1, 10);
			mBITFIELD(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:19: COMMA
			{
			DebugLocation(1, 19);
			mCOMMA(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:25: ENUM
			{
			DebugLocation(1, 25);
			mENUM(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:30: ENUM_BEGIN
			{
			DebugLocation(1, 30);
			mENUM_BEGIN(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:41: ENUM_END
			{
			DebugLocation(1, 41);
			mENUM_END(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:50: ENUM_ENTRY
			{
			DebugLocation(1, 50);
			mENUM_ENTRY(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:61: EQUALS
			{
			DebugLocation(1, 61);
			mEQUALS(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:68: EXTENDS
			{
			DebugLocation(1, 68);
			mEXTENDS(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:76: IDQUALIFIER
			{
			DebugLocation(1, 76);
			mIDQUALIFIER(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:88: LBRACE
			{
			DebugLocation(1, 88);
			mLBRACE(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:95: LEFT_SHIFT
			{
			DebugLocation(1, 95);
			mLEFT_SHIFT(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:106: LPAREN
			{
			DebugLocation(1, 106);
			mLPAREN(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:113: META
			{
			DebugLocation(1, 113);
			mMETA(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:118: NAMESPACE
			{
			DebugLocation(1, 118);
			mNAMESPACE(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:128: RBRACE
			{
			DebugLocation(1, 128);
			mRBRACE(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:135: RPAREN
			{
			DebugLocation(1, 135);
			mRPAREN(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:142: SEMICOLON
			{
			DebugLocation(1, 142);
			mSEMICOLON(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:152: ID
			{
			DebugLocation(1, 152);
			mID(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:155: WHITESPACE
			{
			DebugLocation(1, 155);
			mWHITESPACE(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:166: STRING
			{
			DebugLocation(1, 166);
			mSTRING(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:173: POSITIVE_INTEGER16
			{
			DebugLocation(1, 173);
			mPOSITIVE_INTEGER16(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\GitProjects\\CCGOnlinePublic\\CCGOnline\\CCGOnline\\Grammars\\EnumReflector.g:1:192: POSITIVE_INTEGER10
			{
			DebugLocation(1, 192);
			mPOSITIVE_INTEGER10(); 

			}
			break;

		}

	}


	#region DFA
	DFA6 dfa6;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa6 = new DFA6(this);
	}

	private class DFA6 : DFA
	{
		private const string DFA6_eotS =
			"\x1\xFFFF\x1\xF\x1\xFFFF\x2\xF\x6\xFFFF\x1\xF\x6\xFFFF\x1\x13\x1\xFFFF"+
			"\x5\xF\x1\xFFFF\x6\xF\x1\x25\x4\xF\x1\xFFFF\xA\xF\x1\x36\x1\xF\x1\x38"+
			"\x2\xF\x1\x3B\x1\xFFFF\x1\xF\x1\xFFFF\x2\xF\x1\xFFFF\x1\x3F\x1\x40\x1"+
			"\x41\x3\xFFFF";
		private const string DFA6_eofS =
			"\x42\xFFFF";
		private const string DFA6_minS =
			"\x1\x9\x1\x49\x1\xFFFF\x2\x6E\x6\xFFFF\x1\x61\x6\xFFFF\x1\x78\x1\xFFFF"+
			"\x1\x54\x1\x75\x1\x74\x1\x75\x1\x6D\x1\xFFFF\x1\x46\x1\x6D\x1\x65\x1"+
			"\x6D\x1\x65\x1\x49\x1\x30\x1\x6E\x1\x42\x1\x73\x1\x45\x1\xFFFF\x1\x64"+
			"\x1\x65\x1\x6E\x1\x70\x1\x4C\x1\x73\x1\x67\x1\x64\x1\x61\x1\x44\x1\x30"+
			"\x1\x69\x1\x30\x1\x72\x1\x63\x1\x30\x1\xFFFF\x1\x6E\x1\xFFFF\x1\x79\x1"+
			"\x65\x1\xFFFF\x3\x30\x3\xFFFF";
		private const string DFA6_maxS =
			"\x1\x7D\x1\x49\x1\xFFFF\x1\x78\x1\x6E\x6\xFFFF\x1\x61\x6\xFFFF\x1\x78"+
			"\x1\xFFFF\x1\x54\x1\x75\x1\x74\x1\x75\x1\x6D\x1\xFFFF\x1\x46\x1\x6D\x1"+
			"\x65\x1\x6D\x1\x65\x1\x49\x1\x7A\x1\x6E\x1\x45\x1\x73\x1\x45\x1\xFFFF"+
			"\x1\x64\x1\x65\x1\x6E\x1\x70\x1\x4C\x1\x73\x1\x67\x1\x74\x1\x61\x1\x44"+
			"\x1\x7A\x1\x69\x1\x7A\x1\x72\x1\x63\x1\x7A\x1\xFFFF\x1\x6E\x1\xFFFF\x1"+
			"\x79\x1\x65\x1\xFFFF\x3\x7A\x3\xFFFF";
		private const string DFA6_acceptS =
			"\x2\xFFFF\x1\x2\x2\xFFFF\x1\x7\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xFFFF"+
			"\x1\xF\x1\x10\x1\x11\x1\x12\x1\x13\x1\x14\x1\xFFFF\x1\x16\x5\xFFFF\x1"+
			"\x15\xB\xFFFF\x1\x3\x10\xFFFF\x1\x8\x1\xFFFF\x1\x5\x2\xFFFF\x1\x1\x3"+
			"\xFFFF\x1\x4\x1\x6\x1\xE";
		private const string DFA6_specialS =
			"\x42\xFFFF}>";
		private static readonly string[] DFA6_transitionS =
			{
				"\x2\x10\x2\xFFFF\x1\x10\x12\xFFFF\x1\x10\x1\xFFFF\x1\x11\x5\xFFFF\x1"+
				"\x9\x1\xD\x2\xFFFF\x1\x2\x2\xFFFF\x1\xA\x1\x12\x9\x13\x1\x6\x1\xE\x1"+
				"\x8\x1\x5\x3\xFFFF\x1\xF\x1\x1\x2\xF\x1\x4\x15\xF\x4\xFFFF\x1\xF\x1"+
				"\xFFFF\x4\xF\x1\x3\x8\xF\x1\xB\xC\xF\x1\x7\x1\xFFFF\x1\xC",
				"\x1\x14",
				"",
				"\x1\x15\x9\xFFFF\x1\x16",
				"\x1\x17",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x18",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x19",
				"",
				"\x1\x1A",
				"\x1\x1B",
				"\x1\x1C",
				"\x1\x1D",
				"\x1\x1E",
				"",
				"\x1\x1F",
				"\x1\x20",
				"\x1\x21",
				"\x1\x22",
				"\x1\x23",
				"\x1\x24",
				"\xA\xF\x7\xFFFF\x1A\xF\x4\xFFFF\x1\xF\x1\xFFFF\x1A\xF",
				"\x1\x26",
				"\x1\x27\x2\xFFFF\x1\x28",
				"\x1\x29",
				"\x1\x2A",
				"",
				"\x1\x2B",
				"\x1\x2C",
				"\x1\x2D",
				"\x1\x2E",
				"\x1\x2F",
				"\x1\x30",
				"\x1\x31",
				"\x1\x32\xF\xFFFF\x1\x33",
				"\x1\x34",
				"\x1\x35",
				"\xA\xF\x7\xFFFF\x1A\xF\x4\xFFFF\x1\xF\x1\xFFFF\x1A\xF",
				"\x1\x37",
				"\xA\xF\x7\xFFFF\x1A\xF\x4\xFFFF\x1\xF\x1\xFFFF\x1A\xF",
				"\x1\x39",
				"\x1\x3A",
				"\xA\xF\x7\xFFFF\x1A\xF\x4\xFFFF\x1\xF\x1\xFFFF\x1A\xF",
				"",
				"\x1\x3C",
				"",
				"\x1\x3D",
				"\x1\x3E",
				"",
				"\xA\xF\x7\xFFFF\x1A\xF\x4\xFFFF\x1\xF\x1\xFFFF\x1A\xF",
				"\xA\xF\x7\xFFFF\x1A\xF\x4\xFFFF\x1\xF\x1\xFFFF\x1A\xF",
				"\xA\xF\x7\xFFFF\x1A\xF\x4\xFFFF\x1\xF\x1\xFFFF\x1A\xF",
				"",
				"",
				""
			};

		private static readonly short[] DFA6_eot = DFA.UnpackEncodedString(DFA6_eotS);
		private static readonly short[] DFA6_eof = DFA.UnpackEncodedString(DFA6_eofS);
		private static readonly char[] DFA6_min = DFA.UnpackEncodedStringToUnsignedChars(DFA6_minS);
		private static readonly char[] DFA6_max = DFA.UnpackEncodedStringToUnsignedChars(DFA6_maxS);
		private static readonly short[] DFA6_accept = DFA.UnpackEncodedString(DFA6_acceptS);
		private static readonly short[] DFA6_special = DFA.UnpackEncodedString(DFA6_specialS);
		private static readonly short[][] DFA6_transition;

		static DFA6()
		{
			int numStates = DFA6_transitionS.Length;
			DFA6_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA6_transition[i] = DFA.UnpackEncodedString(DFA6_transitionS[i]);
			}
		}

		public DFA6( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 6;
			this.eot = DFA6_eot;
			this.eof = DFA6_eof;
			this.min = DFA6_min;
			this.max = DFA6_max;
			this.accept = DFA6_accept;
			this.special = DFA6_special;
			this.transition = DFA6_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( BITFIELD | COMMA | ENUM | ENUM_BEGIN | ENUM_END | ENUM_ENTRY | EQUALS | EXTENDS | IDQUALIFIER | LBRACE | LEFT_SHIFT | LPAREN | META | NAMESPACE | RBRACE | RPAREN | SEMICOLON | ID | WHITESPACE | STRING | POSITIVE_INTEGER16 | POSITIVE_INTEGER10 );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
